package RecipeSystemUtil

import RecipeSystemGlobals
public function unit.getChargesOfItem(int itemId) returns int
    int count = 0
    for i = 0 to this.inventorySize() - 1
        if this.itemInSlot(i).getTypeId() == itemId
            count += this.itemInSlot(i).getCharges()
    return count

public function unit.removeChargesOfItem(int itemId, int charges)
    var chargesLeft = charges
    for i = 0 to this.inventorySize() - 1
        let slotItm = this.itemInSlot(i)
        if slotItm.getTypeId() == itemId
            let toRemove = min(chargesLeft, slotItm.getCharges())
            if (toRemove == slotItm.getCharges())
                slotItm.remove()
            else 
                slotItm.setCharges(slotItm.getCharges() - toRemove)
            chargesLeft -= toRemove

public function unit.getEmptyInventorySlots() returns int
    var count = 0
    for i = 0 to this.inventorySize() - 1
        if this.itemInSlot(i) == null
            count++
    return count

// helper function for the end of stacking.
function unit.createNewItems(int itemId, int chargesLeftover, int stackMax)
    var chargesLeft = chargesLeftover
    if chargesLeft > 0
        // we have more charges to give this unit, but we need a new item.
        var emptySlots = this.getEmptyInventorySlots()
        while emptySlots > 0 and chargesLeft > 0
            let slotCharges = min(chargesLeft, stackMax)
            chargesLeft -= slotCharges
            this.addItemById(itemId)
                ..setCharges(slotCharges)
            emptySlots--
        if chargesLeft > 0
            // One last time, we now need to drop the rest on the ground at the 
            // feet of this unit
            createItem(itemId, this.getPos())
                .setCharges(chargesLeft)

/** Stacks all of the items of the given type for the unit, respecting the max 
    stack size for the unit. Drops any left overs on the ground. Compiles all 
    charges into the highest number of chargers per stack that it can.
*/
public function unit.stackItemsOfType(int itemId)
    let itemInfo = ITEM_INFO_MAP.get(itemId)
    let stackMax = itemInfo.getStackLimit(this)
    var chargesLeft = this.getChargesOfItem(itemId)
    for i = 0 to this.inventorySize() - 1
        let slotItm = this.itemInSlot(i)
        if not slotItm == null and slotItm.getTypeId() == itemId
            if chargesLeft <= 0
                // remove this item, as we've put the charges elsewhere
                slotItm.remove()
            else 
                // we have charges to put here.
                let slotCharges = min(chargesLeft, stackMax)
                chargesLeft -= slotCharges
                slotItm.setCharges(slotCharges)
    this.createNewItems(itemId, chargesLeft, stackMax)

/** Takes a specific item and attempts to add it to another stack in your 
    inventory. This function does not compile all of your stacks into one, 
    allowing the manipulating unit to maintain separate, non-maxed stacks.

    Will not place charges into parent (for stack splitting)
 */
public function unit.stackItem(item itm, item parent)
    let itemId = itm.getTypeId()
    let itemInfo = ITEM_INFO_MAP.get(itemId)
    let stackMax = itemInfo.getStackLimit(this)
    var chargesLeft = itm.getCharges()
    for i = 0 to this.inventorySize() - 1
        let slotItm = this.itemInSlot(i)
        if not slotItm == null and slotItm.getTypeId() == itemId
            if slotItm == itm
                // this is the item we're adding, if we have already stacked all
                // of its charges remove it.
                if chargesLeft <= 0
                    slotItm.remove()
                else 
                    // Otherwise, give it as many charges as you can
                    let charges = min(stackMax, chargesLeft)
                    slotItm.setCharges(charges)
                    chargesLeft -= charges   
            else if not slotItm == parent and slotItm.getCharges() < stackMax
                // add some charges to this item, as long as it's not the parent
                let chargesAdded = min(stackMax - slotItm.getCharges(), chargesLeft)
                slotItm.setCharges(slotItm.getCharges() + chargesAdded)
                chargesLeft -= chargesAdded
    // We've tried to add to every item in the inventory, if we have charges left
    // create an item.
    this.createNewItems(itemId, chargesLeft, stackMax)
    


        

                